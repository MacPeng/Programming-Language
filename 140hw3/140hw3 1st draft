--Problem 1
myremoveduplicates :: (Eq a) => [a] -> [a]
myremoveduplicates list
  | null list = list    
  | elem (head list) (tail list)= myremoveduplicates (tail list)   
  | otherwise= (head list) : myremoveduplicates (tail list)   


myremoveduplicates_pm :: (Eq a) => [a] -> [a]
myremoveduplicates_pm [] = []
myremoveduplicates_pm (x:xs)
    = case (elem x xs) of
    True -> myremoveduplicates_pm (xs)
    False -> x:(myremoveduplicates_pm xs)




--problem 2  list1 is the first input list  list2 is the 2nd input list
myintersection :: (Eq a) => [a] -> [a] -> [a]
myintersection list1 list2
  | null list1                 = [] 
  | elem (head list1) list2    = (head list1) : (myintersection (tail list1) list2)
  | otherwise                  = myintersection (tail list1) list2


myintersection_pm :: (Eq a) => [a] -> [a] -> [a]
myintersection_pm [] _list= []
myintersection_pm (x:xs) _list
   = case (elem x _list) of 
   True -> x:(myintersection_pm xs _list)
   False -> myintersection_pm xs _list 




--problem 3
mynthtail :: Int -> [a]-> [a]
mynthtail n list 
  | n == 0              = list
  | otherwise           = mynthtail (n-1) (tail list)

mynthtail_pm :: Int -> [a] -> [a]
mynthtail_pm _n []        = []
mynthtail_pm _n (_x:_xs)
 | _n==0     =(_x:_xs)
 | otherwise =mynthtail_pm (_n-1) _xs



